names(socialPer)
summary(socialPer$idade)
idade  <- as.character(socialPer$idade)
head(idade)
?gsub
timeD  <- as.numeric(gsub("anos(.*)", "", time), );
idade  <- as.numeric(gsub("anos(.*)", "", idade))
idade
idade  <- as.character(socialPer$idade)
idade
idade  <- as.character(socialPer$idade)
idader  <- as.numeric(gsub("anos(.*)", "", idade))
idade[10]
idade[1:20]
idader[1:20]
idade[3]
idade[42]
idade[1:20]
idade[1:40]
idade[24]
idade[24]  <- "42"
idade[24]
idader  <- as.numeric(gsub("anos(.*)", "", idade))
as.numeric(idade) - idader
idade  <- as.character(socialPer$idade)
idade[24]  <- "42"
idade
idade[132]
idader  <- as.numeric(gsub("anos(.*)", "", idade))
idader[132]
idade[132]
idader
idader[77]
idade[77]
summary(idade)
summary(idader)
idade  <- as.character(socialPer$idade)
idade[24]  <- "42"
socialPer$age  <- as.numeric(gsub("anos(.*)", "", idade))
summary(socialPer$age)
by(socialPer$age, socialPer$sexo, summary)
by(socialPer$age, socialPer$sexo, describe) #by sex
socialPer$estado
socialPer$escolaridade
table(socialPer$escolaridade)
prop.table(table(socialPer$escolaridade))
round(prop.table(table(socialPer$escolaridade)),2)
cbind(round(prop.table(table(socialPer$escolaridade)),2))
names(socialPer)
cbind(round(prop.table(table(socialPer$estadocivil)),2))
cbind(round(prop.table(table(socialPer$formacao)),2))
cbind(round(prop.table(table(socialPer$ocupacao)),2)) # Broken, needs manual recoding
socialPer$contato.tema
cbind(round(prop.table(table(socialPer$ocupacao)),2)) # Broken, needs manual recoding
cbind(round(prop.table(table(socialPer$contato.tema)),2)) # Broken, needs manual recoding
socialPer$tempodeservico
socialPer$timeWorking  <- as.numeric(gsub("anos(.*)", "", timeWorking))
timeWorking  <- as.character(socialPer$tempodeservico)
socialPer$timeWorking  <- as.numeric(gsub("anos(.*)", "", timeWorking))
summary(socialPer$timeWorking)
describe(socialPer$timeWorking)
cbind(round(prop.table(table(socialPer$ocupacao)),2)) # Broken, needs manual recoding
cbind(round(prop.table(table(socialPer$contato.tema)),2)) # Broken, needs manual recoding
cbind(round(prop.table(table(socialPer$socialPer$religiao)),2))
cbind(round(prop.table(table(socialPer$religiao)),2))
names(socialPer)
cbind(round(prop.table(table(socialPer$lida.com)),2))
cbind(round(prop.table(table(socialPer$contato.tema)),2))
names(socialPer)
cbind(round(prop.table(table(socialPer$onde.lida.com)),2))
table(socialPer$lida.com.outros)
cbind(round(prop.table(table(socialPer$sexo)),2))
fa.diagram(pca)
fa.diagram(pca, rsize=c(0,4))
fa.diagram(pca, rsize=c(0,1))
fa.diagram(pca, rsize=c(0,.5))
?fa.diagram
fa.diagram(pca, rsize=0.8)
fa.diagram(pca, rsize=1)
fa.diagram(pca, rsize=.8, node.font=c("Helvetica", 14))
fa.diagram(pca, rsize=.8, cex=1,5)
fa.diagram(pca, rsize=.8, cex=1.5)
fa.diagram(pca, rsize=.6, cex=1.5)
fa.diagram(pca, cex=1.5)
fa.diagram(pca)
?abline
?line
plot(cars)
library(cars)
library(car)
require(graphics)
plot(cars)
?abline
load("/home/convidado/ead-senad/preditores/caracterizacao/workspace.RData")
names(atividades)
library("tm")       # Trabalhar com strings
library("psych")    # Função describe
library("plyr")     # Função ldply
library("ggplot2")  # Gráficos
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
sociodemografico  <- read.csv("preditores/caracterizacao/sociodemografico.csv")
## Retirar questões inuteis
sociodemografico <- sociodemografico[, -c(40:86)]
## Criar variável nome completo
sociodemografico$nomecompleto <- paste(sociodemografico$nome, sociodemografico$sobrenome)
sociodemografico$nomecompleto <- stripWhitespace(tolower(sociodemografico$nomecompleto))
## Criar banco somente com pessoas que consentiram participar
sociodemografico  <- subset(sociodemografico, sociodemografico$termo == "Sim")
## Abrir banco de logs Tratados
dfCast <- read.csv("caracterizacao/logsTratados.csv")
# Mesclar bancos ----
dfCast$.id  <- as.character(dfCast$.id)
dfCast$nomecompleto  <- stripWhitespace(tolower(dfCast$.id))
sociodemografico$nomecompleto  <- as.character(sociodemografico$nomecompleto)
## Mesclar e preservar todos os valores
bancoFinal  <- merge(sociodemografico, dfCast, by.x = "nomecompleto", by.y = "nomecompleto")
## Notas
notas  <- read.csv("caracterizacao/notas.csv")
sociodemografico  <- read.csv("preditores/caracterizacao/sociodemografico.csv")
dfCast <- read.csv("preditores/caracterizacao/logsTratados.csv")
notas  <- read.csv("preditores/caracterizacao/notas.csv")
# Pacotes
library("tm")       # Trabalhar com strings
library("psych")    # Função describe
library("plyr")     # Função ldply
library("ggplot2")  # Gráficos
# Função Multiplot
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Abrir banco de dados de atividades ----
sociodemografico  <- read.csv("preditores/caracterizacao/sociodemografico.csv")
## Retirar questões inuteis
sociodemografico <- sociodemografico[, -c(40:86)]
## Criar variável nome completo
sociodemografico$nomecompleto <- paste(sociodemografico$nome, sociodemografico$sobrenome)
sociodemografico$nomecompleto <- stripWhitespace(tolower(sociodemografico$nomecompleto))
## Criar banco somente com pessoas que consentiram participar
sociodemografico  <- subset(sociodemografico, sociodemografico$termo == "Sim")
## Abrir banco de logs Tratados
dfCast <- read.csv("preditores/caracterizacao/logsTratados.csv")
# Mesclar bancos ----
dfCast$.id  <- as.character(dfCast$.id)
dfCast$nomecompleto  <- stripWhitespace(tolower(dfCast$.id))
sociodemografico$nomecompleto  <- as.character(sociodemografico$nomecompleto)
## Mesclar e preservar todos os valores
bancoFinal  <- merge(sociodemografico, dfCast, by.x = "nomecompleto", by.y = "nomecompleto")
## Notas
notas  <- read.csv("preditores/caracterizacao/notas.csv")
####################################################################################################
## ARTIGO 1 -----------------------------------------------------------------------------------------
## Descrição de um curso online para prevenção do uso de drogas para educadores de Escolas Públicas.
####################################################################################################
# Abrir banco de dados
socioDemo  <- read.csv("praticas-profissionais/praticasprofissionais_df.csv")
########################################
# CARACTERÍSTICAS SOCIODEMOGRAFICAS ----
########################################
# Funçao para criar tabelas com porcentagem
porcentagem <- function(var){
a  <- round(prop.table(table(var)),3)*100
print(cbind(sort(a, decreasing = TRUE)))
}
# Idade
## Recodificar variável para numérica
socioDemo$age  <- as.numeric(as.character(socioDemo$idade))
## Excluir usuários que inseriram o ano de nascimento
socioDemo$age <- ifelse(socioDemo$age > 70, NA, socioDemo$age)
## Média de idade
mean(socioDemo$age, na.rm = TRUE)
## Desvio Padrão
sd(socioDemo$age, na.rm = TRUE)
notas  <- read.csv("preditores/caracterizacao/notas.csv", dec = ",", na.strings=c("NA","-"))
names(notas)
notasForum  <- notas[, c("forum1", "forum2", "forum3","forum4","forum5","forum6","forum7","forum8","forum9","forum10","forum11","forum12","forum13","forum14","forum15")]
round(sapply(notasForum, mean, na.rm = TRUE),2)
round(sapply(notasForum, sd, na.rm = TRUE),2)
forum  <- lapply(notasForum, is.na)
forumTeste <- lapply(forum, table)
dfForum <- ldply(forumTeste)
colnames(dfForum)  <- c("forum", "atividade", "falta")
dfForum[1,1] <- "01"; dfForum[2,1] <- "02"; dfForum[3,1] <- "03"; dfForum[4,1] <- "04"; dfForum[5,1] <- "05"; dfForum[6,1] <- "06"; dfForum[7,1] <- "07";dfForum[8,1] <- "08";dfForum[9,1] <- "09";dfForum[10,1] <- "10";dfForum[11,1] <- "11";dfForum[12,1] <- "12";dfForum[13,1] <- "13";dfForum[14,1] <- "14";dfForum[15,1] <- "15";
dfForum$forum  <- as.factor(dfForum$forum)
graphForuns <- ggplot(data = dfForum, aes(x = forum, y = atividade)) + geom_bar(stat="identity", fill = "#CCCCCC", colour="#666666") + xlab("Fórum") + ylab("Participação") + coord_cartesian(ylim=c(0,4500)) + theme_bw() + theme(axis.title.x = element_text(face="bold", size=14), axis.text.x  = element_text(vjust=0.5, size=14), axis.title.y = element_text(face="bold", size=14), axis.text.y  = element_text(vjust=0.5, size=14))
graphForuns
## Selecionar somente os foruns - Faltam questões ainda: Recuperação dos módulos 3 e 4.
## Dúvida - O que são as recuperações gerais?
notasAticol <- notas[, c("ativcolm1", "ativcolm1r","ativcolm2", "ativcolm2r", "ativcolm3", "ativcolm4")]
## Substituir nota maior de quem fez recuperação
### Atividade 1
notasAticol$ativcolm1 <- ifelse(is.na(notasAticol$ativcolm1r), notasAticol$ativcolm1, notasAticol$ativcolm1r)
### Atividade 2
notasAticol$ativcolm2 <- ifelse(is.na(notasAticol$ativcolm2r), notasAticol$ativcolm2, notasAticol$ativcolm2r)
notasAticol <- notas[, c("ativcolm1", "ativcolm1r","ativcolm2", "ativcolm2r", "ativcolm3", "ativcolm4")]
names(notas)
notas  <- read.csv("preditores/caracterizacao/notas.csv", dec = ",", na.strings=c("NA","-"))
notasAticol <- notas[, c("ativcolm1", "ativcolm1r","ativcolm2", "ativcolm2r", "ativcolm3", "ativcolm4")]
notasAticol <- notas[, c("ativcolm1", "ativcolm2","ativcolm1r", "ativcolm2r", "ativcolm3r", "ativcolm4")]
notasAticol$ativcolm1 <- ifelse(is.na(notasAticol$ativcolm1r), notasAticol$ativcolm1, notasAticol$ativcolm1r)
notasAticol$ativcolm2 <- ifelse(is.na(notasAticol$ativcolm2r), notasAticol$ativcolm2, notasAticol$ativcolm2r)
notasAticol <- notasAticol[, c("ativcolm1", "ativcolm2", "ativcolm3", "ativcolm4")]
notasAticol <- notasAticol[, c("ativcolm1", "ativcolm2", "ativcolm3r", "ativcolm4")]
boxplot(notasAticol)
# Preparacao dos dados para realizacao do grafico
## Avaliar quem fez a atividade
aticol  <- lapply(notasAticol, is.na)
## Tabular os resultados
aticolTeste <- lapply(aticol, table)
## Criar dataframe
dfAticol <- ldply(aticolTeste)
## Nomes para as variáeveis do banco
colnames(dfAticol)  <- c("Atividade", "Participou", "Nparticipou")
## Atribuir bons labels às atividades colaborativas
dfAticol[1,1] <- "01"; dfAticol[2,1] <- "02"; dfAticol[3,1] <- "03"; dfAticol[4,1] <- "04"
# Gráfico de participação nos atividades - Bar plot - ggplot2
graphAtiv <- ggplot(data = dfAticol, aes(x = Atividade, y = Participou)) + geom_bar(stat="identity", fill = "#CCCCCC", colour="#666666") + xlab("Atividade Colaborativa") + ylab("") + coord_cartesian(ylim=c(0,4500)) + theme_bw() + theme(axis.title.x = element_text(face="bold", size=14), axis.text.x  = element_text(vjust=0.5, size=14), axis.title.y = element_text(face="bold", size=14), axis.text.y  = element_text(vjust=0.5, size=14))
graphAtiv
names(notas)
socioDemo  <- read.csv("praticas-profissionais/praticasprofissionais_df.csv")
sociodemografico  <- read.csv("preditores/caracterizacao/sociodemografico.csv")
sociodemografico <- sociodemografico[, -c(40:86)]
sociodemografico$nomecompleto <- paste(sociodemografico$nome, sociodemografico$sobrenome)
sociodemografico$nomecompleto <- stripWhitespace(tolower(sociodemografico$nomecompleto))
sociodemografico  <- subset(sociodemografico, sociodemografico$termo == "Sim")
?read.table
ativCol  <- read.csv("preditores/caracterizacao/atividadesColaborativas-respostas.csv", dec = ",", na.strings="-")
head(ativCol)
head(sociodemografico)
sociodemografico  <- read.csv("preditores/caracterizacao/sociodemografico.csv", dec = ",", na.strings="-")
head(sociodemografico)
sociodemografico  <- read.csv("preditores/caracterizacao/sociodemografico.csv", na.strings="-")
head(sociodemografico)
sociodemografico  <- read.csv("preditores/caracterizacao/sociodemografico.csv", na.strings="-")
head(sociodemografico)
sociodemografico  <- read.csv("preditores/caracterizacao/sociodemografico.csv", na.strings="-")
head(sociodemografico)
sociodemografico  <- read.csv("preditores/caracterizacao/sociodemografico.csv", na.strings="-")
head(sociodemografico)
summary(sociodemografico)
sociodemografico <- sociodemografico[, -c(40:86)]
sociodemografico$nomecompleto <- paste(sociodemografico$nome, sociodemografico$sobrenome)
sociodemografico$nomecompleto <- stripWhitespace(tolower(sociodemografico$nomecompleto))
sociodemografico  <- subset(sociodemografico, sociodemografico$termo == "Sim")
sociodemografico  <- subset(sociodemografico, sociodemografico$termo == "Sim")
socioDemo  <- read.csv("preditores/caracterizacao/sociodemografico.csv", na.strings="-")
socioDemo  <- read.csv("preditores/caracterizacao/sociodemografico.csv", na.strings="-")
socioDemo  <- subset(socioDemo, socioDemo$termo == "Sim")
porcentagem <- function(var){
a  <- round(prop.table(table(var)),3)*100
print(cbind(sort(a, decreasing = TRUE)))
}
socioDemo$age  <- as.numeric(as.character(socioDemo$idade))
socioDemo$age  <- as.numeric(as.character(socioDemo$idade))
idade
socioDemo  <- subset(socioDemo, socioDemo$termo == "Sim")
socioDemo$age  <- as.numeric(as.character(socioDemo$idade))
socioDemo$age <- ifelse(socioDemo$age > 70, NA, socioDemo$age)
mean(socioDemo$age, na.rm = TRUE)
sd(socioDemo$age, na.rm = TRUE)
socioDemo  <- read.csv("preditores/caracterizacao/sociodemografico.csv", na.strings="-")
socioDemo  <- read.csv("preditores/caracterizacao/sociodemografico.csv", na.strings="-")
porcentagem(ativCol$material)
ativCol  <- subset(ativCol, ativCol$termo == "Sim")
porcentagem(ativCol$flexprazo)
porcentagem(ativCol$interacaocol)
porcentagem(ativCol$organizado)
porcentagem(ativCol$freqauxitutor)
porcentagem(ativCol$partoutrocurso)
load("~/ead-senad/preditores/caracterizacao/workspace.RData")
setwd("preditores/estudo 1/")
setwd("preditores/estudo 1/est 1 -relatorioMapa/")
setwd("~/ead-senad/preditores/estudo 1/est 1 -relatorioMapa")
setwd("~/ead-senad")
library("tm")       # Trabalhar com strings
library("psych")    # Função describe
library("plyr")     # Função ldply
library("ggplot2")  # Gráficos
# Função Multiplot - This function allows creation of multiple plots using the ggplot2 package.
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Abrir banco de dados de atividades ----
sociodemografico  <- read.csv("preditores/data/sociodemografico.csv", na.strings="-")
sociodemografico <- sociodemografico[, -c(40:86)]
sociodemografico$nomecompleto <- paste(sociodemografico$nome, sociodemografico$sobrenome)
sociodemografico$nomecompleto <- stripWhitespace(tolower(sociodemografico$nomecompleto))
sociodemografico  <- subset(sociodemografico, sociodemografico$termo == "Sim")
dfCast <- read.csv("preditores/data/logsTratados.csv")
## Abrir banco de atividades colaborativas
ativCol  <- read.csv("preditores/data/atividadesColaborativas-respostas.csv", dec = ",", na.strings="-")
## Criar banco somente com pessoas que consentiram participar
ativCol  <- subset(ativCol, ativCol$termo == "Sim")
dfCast$.id  <- as.character(dfCast$.id)
dfCast$nomecompleto  <- stripWhitespace(tolower(dfCast$.id))
sociodemografico$nomecompleto  <- as.character(sociodemografico$nomecompleto)
## Mesclar e preservar todos os valores
bancoFinal  <- merge(sociodemografico, dfCast, by.x = "nomecompleto", by.y = "nomecompleto")
## Notas
notas  <- read.csv("preditores/data/notas.csv")
socioDemo  <- read.csv("preditores/data/sociodemografico.csv", na.strings="-")
socioDemo  <- subset(socioDemo, socioDemo$termo == "Sim")
########################################
# CARACTERÍSTICAS SOCIODEMOGRAFICAS ----
########################################
# Funçao para criar tabelas com porcentagem
porcentagem <- function(var){
a  <- round(prop.table(table(var)),3)*100
print(cbind(sort(a, decreasing = TRUE)))
}
# Idade
## Recodificar variável para numérica
socioDemo$age  <- as.numeric(as.character(socioDemo$idade))
## Excluir usuários que inseriram o ano de nascimento
socioDemo$age <- ifelse(socioDemo$age > 70, NA, socioDemo$age)
## Média de idade
mean(socioDemo$age, na.rm = TRUE)
## Desvio Padrão
sd(socioDemo$age, na.rm = TRUE)
## Sexo
porcentagem(socioDemo$sexo)
## Escolaridade
porcentagem(socioDemo$escolaridade)
## Ocupaçao
porcentagem(socioDemo$ocupacao)
## Contato Anterior
porcentagem(socioDemo$contatoanterior)
## Onde lida
porcentagem(socioDemo$lida.onde)
## Motivo Curso
porcentagem(socioDemo$motivocurso)
## Material Didático
porcentagem(ativCol$material)
## Prazo Atividades
porcentagem(ativCol$flexprazo)
## Interação entre pares
porcentagem(ativCol$interacaocol)
## Organização curso
porcentagem(ativCol$organizado)
## O quão importante é o auxílio de seu tutor
porcentagem(ativCol$freqauxitutor)
## Participação em outro curso
porcentagem(ativCol$partoutrocurso)
########################################
# NOTAS                             ----
########################################
## Ler banco com notas
notas  <- read.csv("preditores/data/notas.csv", dec = ".", na.strings=c("NA","-"))
names(notas)
# Listar variáveis com notas
summary(notas[,2:29])
notasForum  <- notas[, c("forum1", "forum2", "forum3","forum4","forum5","forum6","forum7","forum8","forum9","forum10","forum11","forum12","forum13","forum14","forum15")]
# Notas medias dos foruns
round(sapply(notasForum, mean, na.rm = TRUE),2)
# Desvio padrão
round(sapply(notasForum, sd, na.rm = TRUE),2)
# Preparacao dos dados para realizacao do grafico
## Avaliar quem fez a atividade
forum  <- lapply(notasForum, is.na)
forum
s resultados
forumTeste <- lapply(forum, table)
## Criar dataframe
dfForum <- ldply(forumTeste)
## Nomes para as variáeveis do banco
colnames(dfForum)  <- c("forum", "atividade", "falta")
dfForum
dfForum[1,1] <- "01"; dfForum[2,1] <- "02"; dfForum[3,1] <- "03"; dfForum[4,1] <- "04"; dfForum[5,1] <- "05"; dfForum[6,1] <- "06"; dfForum[7,1] <- "07";dfForum[8,1] <- "08";dfForum[9,1] <- "09";dfForum[10,1] <- "10";dfForum[11,1] <- "11";dfForum[12,1] <- "12";dfForum[13,1] <- "13";dfForum[14,1] <- "14";dfForum[15,1] <- "15";
dfForum$forum  <- as.factor(dfForum$forum)
# Gráfico de participação nos fóruns - Bar plot - ggplot2
graphForuns <- ggplot(data = dfForum, aes(x = forum, y = atividade)) + geom_bar(stat="identity", fill = "#CCCCCC", colour="#666666") + xlab("Fórum") + ylab("Participação") + coord_cartesian(ylim=c(0,4500)) + theme_bw() + theme(axis.title.x = element_text(face="bold", size=12), axis.text.x  = element_text(vjust=0.5, size=8), axis.title.y = element_text(face="bold", size=12), axis.text.y  = element_text(vjust=0.5, size=12))
graphForuns
ativCol  <- read.csv("atividadesColaborativas-respostas.csv", dec = ",", na.strings="-", stringsAsFactor = FALSE)
ativCol  <- read.csv("preditores/data/atividadesColaborativas-respostas.csv", dec = ",", na.strings="-", stringsAsFactor = FALSE)
ativCol
head(ativCol)
ativCol  <- read.csv("preditores/data/ativColPre.csv", dec = ",", na.strings="-", stringsAsFactor = FALSE)
names(ativCol)
ativCol  <- read.csv("preditores/data/ativColPre.csv", dec = ",", na.strings="-", stringsAsFactor = FALSE)
propTable(ativColPos$FinteresseAlun)
propTable  <- function(x){
cbind(round(prop.table(sort(table(x), decreasing = TRUE)),3))*100
}
propTable(ativColPos$BausenFam)
q
ativColPre  <- read.csv("preditores/data/ativColPre.csv", dec = ",", na.strings="-", stringsAsFactor = FALSE)
ativColPos  <- read.csv("preditores/data/ativColPos.csv", dec = ",", na.strings="-", stringsAsFactor = FALSE)
ativColPre$BausenFam  <- ifelse(grepl("Ausência da família", ativColPre$barreiras),"Sim","Não")
ativColPre$BcomPais  <- ifelse(grepl("Pouca comunicação com os pais", ativColPre$barreiras),"Sim","Não")
ativColPre$BdrogasPais  <- ifelse(grepl("Uso de substâncias por familiares", ativColPre$barreiras),"Sim","Não")
ativColPre$BdrogasEsc  <- ifelse(grepl("Presença de drogas ilícitas no ambiente escolar", ativColPre$barreiras),"Sim","Não")
ativColPre$Btrafico  <- ifelse(grepl("Proximidade da rede de distribuição de drogas", ativColPre$barreiras),"Sim","Não")
ativColPre$BlimAlunos  <- ifelse(grepl("Ausência de limites dos alunos", ativColPre$barreiras),"Sim","Não")
ativColPre$BausenciaColEs  <- ifelse(grepl("Ausência de colaboração da equipe escolar", ativColPre$barreiras),"Sim","Não")
ativColPre$BausenciaAluEs  <- ifelse(grepl("Ausência dos alunos na escola", ativColPre$barreiras),"Sim","Não")
ativColPre$BregrasAluEs  <- ifelse(grepl("Ausência de regras no ambiente escolar", ativColPre$barreiras),"Sim","Não")
# Facilitadores
ativColPre$FprojEscol  <- ifelse(grepl("Desenvolvimento de projetos na escola", ativColPre$facilitadores),"Sim","Não")
ativColPre$FpresencaEquipe  <- ifelse(grepl("Presença de uma equipe para trabalhar a temática", ativColPre$facilitadores),"Sim","Não")
ativColPre$FregrasEscol  <- ifelse(grepl("Presença de regras no ambiente escolar", ativColPre$facilitadores),"Sim","Não")
ativColPre$FrespeitoAP  <- ifelse(grepl("Respeito na relação professor-aluno", ativColPre$facilitadores),"Sim","Não")
ativColPre$FestiAlun  <- ifelse(grepl("Estímulo aos alunos", ativColPre$facilitadores),"Sim","Não")
ativColPre$FpromCompConf  <- ifelse(grepl("Promoção de compromisso e confiança", ativColPre$facilitadores),"Sim","Não")
ativColPre$FvalAmbEsc  <- ifelse(grepl("Valorização do ambiente escolar", ativColPre$facilitadores),"Sim","Não")
ativColPre$FpartPaiCom  <- ifelse(grepl("Participação da comunidade e dos pais no trabalho de prevenção", ativColPre$facilitadores),"Sim","Não")
ativColPre$FapoioProj  <- ifelse(grepl("Apoio aos projetos em desenvolvimento", ativColPre$facilitadores),"Sim","Não")
ativColPre$FinteresseAlun  <- ifelse(grepl("Possuir alunos interessados na temática", ativColPre$facilitadores),"Sim","Não")
ativColPre$FrelAEC  <- ifelse(grepl("Relação saudável entre aluno-família-escola-comunidade", ativColPre$facilitadores),"Sim","Não")
# Dificultadores
ativColPos$BausenFam  <- ifelse(grepl("Ausência da família", ativColPos$barreiras),"Sim","Não")
ativColPos$BcomPais  <- ifelse(grepl("Pouca comunicação com os pais", ativColPos$barreiras),"Sim","Não")
ativColPos$BdrogasPais  <- ifelse(grepl("Uso de substâncias por familiares", ativColPos$barreiras),"Sim","Não")
ativColPos$BdrogasEsc  <- ifelse(grepl("Presença de drogas ilícitas no ambiente escolar", ativColPos$barreiras),"Sim","Não")
ativColPos$Btrafico  <- ifelse(grepl("Proximidade da rede de distribuição de drogas", ativColPos$barreiras),"Sim","Não")
ativColPos$BlimAlunos  <- ifelse(grepl("Ausência de limites dos alunos", ativColPos$barreiras),"Sim","Não")
ativColPos$BausenciaColEs  <- ifelse(grepl("Ausência de colaboração da equipe escolar", ativColPos$barreiras),"Sim","Não")
ativColPos$BausenciaAluEs  <- ifelse(grepl("Ausência dos alunos na escola", ativColPos$barreiras),"Sim","Não")
ativColPos$BregrasAluEs  <- ifelse(grepl("Ausência de regras no ambiente escolar", ativColPos$barreiras),"Sim","Não")
# Facilitadores
ativColPos$FprojEscol  <- ifelse(grepl("Desenvolvimento de projetos na escola", ativColPos$facilitadores),"Sim","Não")
ativColPos$FpresencaEquipe  <- ifelse(grepl("Presença de uma equipe para trabalhar a temática", ativColPos$facilitadores),"Sim","Não")
ativColPos$FregrasEscol  <- ifelse(grepl("Presença de regras no ambiente escolar", ativColPos$facilitadores),"Sim","Não")
ativColPos$FrespeitoAP  <- ifelse(grepl("Respeito na relação professor-aluno", ativColPos$facilitadores),"Sim","Não")
ativColPos$FestiAlun  <- ifelse(grepl("Estímulo aos alunos", ativColPos$facilitadores),"Sim","Não")
ativColPos$FpromCompConf  <- ifelse(grepl("Promoção de compromisso e confiança", ativColPos$facilitadores),"Sim","Não")
ativColPos$FvalAmbEsc  <- ifelse(grepl("Valorização do ambiente escolar", ativColPos$facilitadores),"Sim","Não")
ativColPos$FpartPaiCom  <- ifelse(grepl("Participação da comunidade e dos pais no trabalho de prevenção", ativColPos$facilitadores),"Sim","Não")
ativColPos$FapoioProj  <- ifelse(grepl("Apoio aos projetos em desenvolvimento", ativColPos$facilitadores),"Sim","Não")
ativColPos$FinteresseAlun  <- ifelse(grepl("Possuir alunos interessados na temática", ativColPos$facilitadores),"Sim","Não")
ativColPos$FrelAEC  <- ifelse(grepl("Relação saudável entre aluno-família-escola-comunidade", ativColPos$facilitadores),"Sim","Não")
names(ativColPos)
ativColPos  <- read.csv("preditores/data/ativColPos.csv", dec = ",", na.strings="-", stringsAsFactor = FALSE)
names(ativColPos)
ativColPos  <- read.csv("preditores/data/ativColPos.csv", dec = ",", na.strings="-", stringsAsFactor = FALSE)
names(ativColPos)
names(ativColPos)
